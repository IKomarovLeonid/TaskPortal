// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataBase.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210302203316_Initalize_Db")]
    partial class Initalize_Db
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Objects.ApplicationTasks.AccountsTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("AccountName")
                        .HasColumnName("account_name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("AccountPassword")
                        .HasColumnName("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("ConfigurationId")
                        .HasColumnName("configuration_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Count")
                        .HasColumnName("count")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Groups")
                        .HasColumnName("groups")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("Leverage")
                        .HasColumnName("leverage")
                        .HasColumnType("bigint unsigned");

                    b.Property<double>("MaxBalance")
                        .HasColumnName("max_balance")
                        .HasColumnType("double");

                    b.Property<double>("MaxCredit")
                        .HasColumnName("max_credit")
                        .HasColumnType("double");

                    b.Property<double>("MinBalance")
                        .HasColumnName("min_balance")
                        .HasColumnType("double");

                    b.Property<double>("MinCredit")
                        .HasColumnName("min_credit")
                        .HasColumnType("double");

                    b.Property<int>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int");

                    b.Property<ulong>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("accounts_tasks");
                });

            modelBuilder.Entity("Objects.ApplicationTasks.CleanGroupTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ConfigurationId")
                        .HasColumnName("configuration_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Group")
                        .HasColumnName("group")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int");

                    b.Property<ulong>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("clean_group_tasks");
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GeneratePendingOrdersTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ConfigurationId")
                        .HasColumnName("configuration_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Group")
                        .HasColumnName("group")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("PendingPrice")
                        .HasColumnName("price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<uint>("PerAccountCount")
                        .HasColumnName("per_account_count")
                        .HasColumnType("int unsigned");

                    b.Property<ulong>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<uint>("TotalCount")
                        .HasColumnName("total_count")
                        .HasColumnType("int unsigned");

                    b.Property<int>("Type")
                        .HasColumnName("pending_type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("pending_orders_tasks");
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GeneratePositionsTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ConfigurationId")
                        .HasColumnName("configuration_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Count")
                        .HasColumnName("count")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Direction")
                        .HasColumnName("direction")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Groups")
                        .HasColumnName("groups")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("MaxLots")
                        .HasColumnName("max_lots")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MaxOpenPrice")
                        .HasColumnName("max_price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MinLots")
                        .HasColumnName("min_lots")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("MinOpenPrice")
                        .HasColumnName("min_price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<ulong>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<ulong>("StopLoss")
                        .HasColumnName("stop_loss")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Symbols")
                        .HasColumnName("symbols")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<ulong>("TakeProfit")
                        .HasColumnName("take_profit")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("positions_tasks");
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GenerateTicksTask", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<decimal>("AskPrice")
                        .HasColumnName("ask")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("BidPrice")
                        .HasColumnName("bid")
                        .HasColumnType("decimal(65,30)");

                    b.Property<ulong>("ConfigurationId")
                        .HasColumnName("configuration_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("Count")
                        .HasColumnName("count")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("ProcessingTime")
                        .HasColumnName("process_time")
                        .HasColumnType("time(6)");

                    b.Property<int>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int");

                    b.Property<ulong>("ServerId")
                        .HasColumnName("server_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<decimal>("Spread")
                        .HasColumnName("spread")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("status")
                        .HasColumnType("int");

                    b.Property<string>("Symbols")
                        .HasColumnName("symbols")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ticks_tasks");
                });

            modelBuilder.Entity("Objects.Results.GenerateResultInfo", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ErrorCount")
                        .HasColumnName("error_count")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ProcessedCount")
                        .HasColumnName("processed_count")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("RequestedCount")
                        .HasColumnName("requested_count")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<ulong>("TaskId")
                        .HasColumnName("task_id")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("TaskType")
                        .HasColumnName("Task type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("generate_results");
                });

            modelBuilder.Entity("Objects.Servers.Server", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("ConnectionSettings")
                        .HasColumnName("settings")
                        .HasColumnType("json");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Enabled")
                        .HasColumnName("activity")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(64)");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("Objects.Settings.JobSettings", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<string>("Timers")
                        .HasColumnName("jobs")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("Objects.TaskConfigurations.TaskConfiguration", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint unsigned");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("created_time")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Settings")
                        .HasColumnName("settings")
                        .HasColumnType("json");

                    b.Property<int>("State")
                        .HasColumnName("state")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("updated_time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("task_configurations");
                });

            modelBuilder.Entity("Objects.ApplicationTasks.AccountsTask", b =>
                {
                    b.HasOne("Objects.Servers.Server", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Objects.ApplicationTasks.CleanGroupTask", b =>
                {
                    b.HasOne("Objects.Servers.Server", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GeneratePendingOrdersTask", b =>
                {
                    b.HasOne("Objects.Servers.Server", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GeneratePositionsTask", b =>
                {
                    b.HasOne("Objects.Servers.Server", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Objects.ApplicationTasks.GenerateTicksTask", b =>
                {
                    b.HasOne("Objects.Servers.Server", null)
                        .WithMany()
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
